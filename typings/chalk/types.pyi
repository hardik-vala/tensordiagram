"""Type stubs for chalk.types module."""
from __future__ import annotations

from typing import Any, Callable, Dict, List, Optional, Protocol

from colour import Color

from chalk.envelope import Envelope
from chalk.monoid import Monoid
from chalk.style import Style
from chalk.trace import Trace
from chalk.transform import P2, V2, Affine

class Enveloped(Protocol):
    def get_envelope(self) -> Envelope: ...

class Traceable(Protocol):
    def get_trace(self) -> Trace: ...

class Shape(Enveloped, Traceable, Protocol):
    def accept(self, visitor: Any, **kwargs: Any) -> Any: ...

class TrailLike(Protocol):
    def to_trail(self) -> Any: ...
    def to_path(self, location: P2 = ...) -> Any: ...
    def at(self, location: P2) -> Any: ...
    def stroke(self) -> Diagram: ...

class Diagram(Enveloped, Traceable, Monoid):
    # Transform methods
    def apply_transform(self, t: Affine) -> Diagram: ...
    def translate(self, dx: float, dy: float) -> Diagram: ...
    def rotate(self, angle: float) -> Diagram: ...
    def rotate_by(self, angle: float) -> Diagram: ...
    def scale(self, factor: float) -> Diagram: ...
    def scale_x(self, factor: float) -> Diagram: ...
    def scale_y(self, factor: float) -> Diagram: ...
    def scale_uniform_to_x(self, x: float) -> Diagram: ...
    def scale_uniform_to_y(self, y: float) -> Diagram: ...
    def shear_x(self, factor: float) -> Diagram: ...
    def shear_y(self, factor: float) -> Diagram: ...
    def reflect_x(self) -> Diagram: ...
    def reflect_y(self) -> Diagram: ...

    # Style methods (from Stylable)
    def line_width(self, width: float) -> Diagram: ...
    def line_width_local(self, width: float) -> Diagram: ...
    def line_color(self, color: Color) -> Diagram: ...
    def fill_color(self, color: Color) -> Diagram: ...
    def fill_opacity(self, opacity: float) -> Diagram: ...
    def dashing(self, dashing_strokes: List[float], offset: float) -> Diagram: ...
    def apply_style(self, style: Style) -> Diagram: ...
    def _style(self, style: Style) -> Diagram: ...

    # Combination operators
    def __add__(self, other: Diagram) -> Diagram: ...
    def __or__(self, d: Diagram) -> Diagram: ...
    def __truediv__(self, d: Diagram) -> Diagram: ...
    def __floordiv__(self, d: Diagram) -> Diagram: ...

    # Combination methods
    def atop(self, other: Diagram) -> Diagram: ...
    def above(self, other: Diagram) -> Diagram: ...
    def beside(self, other: Diagram, direction: V2) -> Diagram: ...
    def beside_snug(self, other: Diagram, direction: V2) -> Diagram: ...
    def juxtapose(self, other: Diagram, direction: V2) -> Diagram: ...
    def juxtapose_snug(self, other: Diagram, direction: V2) -> Diagram: ...

    # Alignment methods
    def align(self, v: V2) -> Diagram: ...
    def align_t(self) -> Diagram: ...
    def align_b(self) -> Diagram: ...
    def align_l(self) -> Diagram: ...
    def align_r(self) -> Diagram: ...
    def align_tl(self) -> Diagram: ...
    def align_tr(self) -> Diagram: ...
    def align_bl(self) -> Diagram: ...
    def align_br(self) -> Diagram: ...
    def center_xy(self) -> Diagram: ...
    def snug(self, v: V2) -> Diagram: ...

    # Padding and framing
    def frame(self, extra: float) -> Diagram: ...
    def pad(self, extra: float) -> Diagram: ...

    # Envelope and trace
    def with_envelope(self, other: Diagram) -> Diagram: ...
    def compose(self, envelope: Envelope, other: Optional[Diagram] = None) -> Diagram: ...

    # Subdiagrams
    def get_subdiagram(self, name: Any) -> Optional[Any]: ...
    def get_sub_map(self, t: Affine = ...) -> Dict[Any, List[Any]]: ...
    def with_names(
        self,
        names: List[Any],
        f: Callable[[List[Any], Diagram], Diagram],
    ) -> Diagram: ...

    # Debugging
    def show_origin(self) -> Diagram: ...
    def show_envelope(self, phantom: bool = False, angle: int = 45) -> Diagram: ...

    # Rendering
    def render(self, path: str, height: Optional[int] = None, width: Optional[int] = None) -> None: ...
    def render_svg(self, path: str, height: Optional[int] = None, width: Optional[int] = None) -> None: ...
    def render_png(self, path: str, height: Optional[int] = None, width: Optional[int] = None) -> None: ...
    def render_pdf(self, path: str, height: Optional[int] = None) -> None: ...

    def _repr_svg_(self) -> str: ...
    def _repr_html_(self) -> str: ...

    # Utility
    def to_list(self, t: Affine = ...) -> List[Diagram]: ...
    def accept(self, visitor: Any, args: Any) -> Any: ...
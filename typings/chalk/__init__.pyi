"""Type stubs for chalk package."""
from typing import Iterable, List, Optional, Tuple

from colour import Color

from chalk.types import Diagram as Diagram
from chalk.transform import V2, P2, Affine, BoundingBox
from chalk.style import Style
from chalk.envelope import Envelope
from chalk.trail import Trail
from chalk.arrow import ArrowOpts
from chalk.subdiagram import Name

# Explicitly re-export Diagram
__all__ = ["Diagram"]

# Re-export all align functions
def align_l(self: Diagram) -> Diagram: ...
def align_r(self: Diagram) -> Diagram: ...
def align_t(self: Diagram) -> Diagram: ...
def align_b(self: Diagram) -> Diagram: ...
def align_tl(self: Diagram) -> Diagram: ...
def align_tr(self: Diagram) -> Diagram: ...
def align_bl(self: Diagram) -> Diagram: ...
def align_br(self: Diagram) -> Diagram: ...

# Combinators
def hcat(diagrams: Iterable[Diagram], sep: Optional[float] = None) -> Diagram: ...
def vcat(diagrams: Iterable[Diagram], sep: Optional[float] = None) -> Diagram: ...
def concat(diagrams: Iterable[Diagram]) -> Diagram: ...
def cat(diagrams: Iterable[Diagram], v: V2, sep: Optional[float] = None) -> Diagram: ...
def empty() -> Diagram: ...
def hstrut(width: Optional[float]) -> Diagram: ...
def vstrut(height: Optional[float]) -> Diagram: ...
def strut(width: float, height: float) -> Diagram: ...

# Shapes
def rectangle(width: float, height: float) -> Diagram: ...
def square(side: float) -> Diagram: ...
def circle(radius: float) -> Diagram: ...
def text(s: str, size: float) -> Diagram: ...
def hrule(width: float) -> Diagram: ...
def vrule(height: float) -> Diagram: ...

# Transform
unit_x: V2
unit_y: V2
origin: P2

def from_radians(angle: float) -> float: ...
def to_radians(angle: float) -> float: ...

# Arrow
def arrow_at(start: P2, direction: V2, opts: Optional[ArrowOpts] = None) -> Diagram: ...
def arrow_between(start: P2, end: P2, opts: Optional[ArrowOpts] = None) -> Diagram: ...
def arrow_v(direction: V2, opts: Optional[ArrowOpts] = None) -> Diagram: ...

# Core
def set_svg_height(height: int) -> None: ...
def set_svg_draw_height(height: int) -> None: ...

__version__: str
__libname__: str
